import { parseConfig } from "./options";

const defaultOptions = {
  bannerComment: [
    "/* eslint-disable */",
    "/* tslint:disable */",
    "/**",
    "* This file was automatically generated by bson-schema-to-typescript.",
    "* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,",
    "* and run bson-schema-to-typescript to regenerate this file.",
    "*/",
  ],
  enableConstEnums: true,
  ignoreMinAndMaxItems: false,
  strictIndexSignatures: false,
  unknownAny: true,
  path: "src/__generated__",
  env: {
    MONGODB_URI: "MONGODB_URI",
    MONGODB_DATABASE: "MONGODB_DATABASE",
  },
};

describe("Default options", () => {
  /**
   * JSON.stringify generated inputs
   */

  // Null
  test("null returns default options", () => {
    const config = JSON.stringify(null);
    expect(parseConfig(config)).toStrictEqual(defaultOptions);
  });

  // Undefined
  test("undefined returns default options", () => {
    const config = JSON.stringify(undefined);
    expect(parseConfig(config)).toStrictEqual(defaultOptions);
  });

  // Boolean
  test("boolean returns default options", () => {
    const config = JSON.stringify(false);
    expect(parseConfig(config)).toStrictEqual(defaultOptions);
  });

  test("boolean returns default options", () => {
    const config = JSON.stringify(true);
    expect(parseConfig(config)).toStrictEqual(defaultOptions);
  });

  // Number
  test("number returns default options (JSON)", () => {
    const config = JSON.stringify(1);
    expect(parseConfig(config)).toStrictEqual(defaultOptions);
  });

  test("number returns default options (JSON)", () => {
    const config = JSON.stringify(0);
    expect(parseConfig(config)).toStrictEqual(defaultOptions);
  });

  test("number returns default options (JSON)", () => {
    const config = JSON.stringify(1.1);
    expect(parseConfig(config)).toStrictEqual(defaultOptions);
  });

  // Object
  test("empty object returns default options", () => {
    const config = JSON.stringify({});
    expect(parseConfig(config)).toStrictEqual(defaultOptions);
  });

  // Array
  test("empty array returns default options", () => {
    const config = JSON.stringify([]);
    expect(parseConfig(config)).toStrictEqual(defaultOptions);
  });

  test("array returns default options", () => {
    const config = JSON.stringify(["1"]);
    expect(parseConfig(config)).toStrictEqual(defaultOptions);
  });

  // String
  test("empty string returns default options", () => {
    const config = JSON.stringify("");
    expect(parseConfig(config)).toStrictEqual(defaultOptions);
  });

  test("some string returns default options", () => {
    const config = JSON.stringify("x");
    expect(parseConfig(config)).toStrictEqual(defaultOptions);
  });

  /**
   * Plain string inputs
   */
  test("empty string returns default options", () => {
    const config = "";
    expect(parseConfig(config)).toStrictEqual(defaultOptions);
  });

  test("some string returns default options", () => {
    const config = "x";
    expect(parseConfig(config)).toStrictEqual(defaultOptions);
  });

  test("some string returns default options", () => {
    const config = "undefined";
    expect(parseConfig(config)).toStrictEqual(defaultOptions);
  });
});

describe("Customized options with wrong type", () => {
  // bannerComment
  test("bannerComment as boolean returns default options", () => {
    const config = JSON.stringify({ bannerComment: true });
    expect(parseConfig(config)).toStrictEqual(defaultOptions);
  });

  test("bannerComment as array of non-strings returns default options", () => {
    const config = JSON.stringify({ bannerComment: [false] });
    expect(parseConfig(config)).toStrictEqual(defaultOptions);
  });

  // enableConstEnums
  test("enableConstEnums as string returns default options", () => {
    const config = JSON.stringify({ enableConstEnums: "some string" });
    expect(parseConfig(config)).toStrictEqual(defaultOptions);
  });

  // ignoreMinAndMaxItems
  test("ignoreMinAndMaxItems as object returns default options", () => {
    const config = JSON.stringify({ ignoreMinAndMaxItems: { x: 1 } });
    expect(parseConfig(config)).toStrictEqual(defaultOptions);
  });

  // strictIndexSignatures
  test("strictIndexSignatures as null returns default options", () => {
    const config = JSON.stringify({ strictIndexSignatures: null });
    expect(parseConfig(config)).toStrictEqual(defaultOptions);
  });

  // unknownAny
  test("unknownAny as array returns default options", () => {
    const config = JSON.stringify({ unknownAny: ["1"] });
    expect(parseConfig(config)).toStrictEqual(defaultOptions);
  });

  // path
  test("path as number returns default options", () => {
    const config = JSON.stringify({ path: 1 });
    expect(parseConfig(config)).toStrictEqual(defaultOptions);
  });

  // env
  test("env as string returns default options", () => {
    const config = JSON.stringify({ env: "some string" });
    expect(parseConfig(config)).toStrictEqual(defaultOptions);
  });

  test("env as empty object returns default options", () => {
    const config = JSON.stringify({ env: {} });
    expect(parseConfig(config)).toStrictEqual(defaultOptions);
  });
});

describe("Customized options", () => {
  test("bannerComment", () => {
    const config = JSON.stringify({ bannerComment: ["some banner"] });
    expect(parseConfig(config)).toStrictEqual({
      ...defaultOptions,
      bannerComment: ["some banner"],
    });
  });

  test("enableConstEnums", () => {
    const config = JSON.stringify({ enableConstEnums: false });
    expect(parseConfig(config)).toStrictEqual({
      ...defaultOptions,
      enableConstEnums: false,
    });
  });

  test("ignoreMinAndMaxItems", () => {
    const config = JSON.stringify({ ignoreMinAndMaxItems: true });
    expect(parseConfig(config)).toStrictEqual({
      ...defaultOptions,
      ignoreMinAndMaxItems: true,
    });
  });

  test("strictIndexSignatures", () => {
    const config = JSON.stringify({ strictIndexSignatures: true });
    expect(parseConfig(config)).toStrictEqual({
      ...defaultOptions,
      strictIndexSignatures: true,
    });
  });

  test("unknownAny", () => {
    const config = JSON.stringify({ unknownAny: false });
    expect(parseConfig(config)).toStrictEqual({
      ...defaultOptions,
      unknownAny: false,
    });
  });

  test("path", () => {
    const config = JSON.stringify({ path: "newPath/" });
    expect(parseConfig(config)).toStrictEqual({
      ...defaultOptions,
      path: "newPath/",
    });
  });

  test("env MONGODB_URI", () => {
    const config = JSON.stringify({ env: { MONGODB_URI: "SOME_URI" } });
    expect(parseConfig(config)).toStrictEqual({
      ...defaultOptions,
      env: {
        MONGODB_URI: "SOME_URI",
        MONGODB_DATABASE: "MONGODB_DATABASE",
      },
    });
  });

  test("env MONGODB_DATABASE", () => {
    const config = JSON.stringify({ env: { MONGODB_DATABASE: "SOME_DB" } });
    expect(parseConfig(config)).toStrictEqual({
      ...defaultOptions,
      env: {
        MONGODB_URI: "MONGODB_URI",
        MONGODB_DATABASE: "SOME_DB",
      },
    });
  });

  test("env MONGODB_URI and MONGODB_DATABASE", () => {
    const config = JSON.stringify({
      env: { MONGODB_URI: "SOME_URI", MONGODB_DATABASE: "SOME_DB" },
    });
    expect(parseConfig(config)).toStrictEqual({
      ...defaultOptions,
      env: {
        MONGODB_URI: "SOME_URI",
        MONGODB_DATABASE: "SOME_DB",
      },
    });
  });
});

describe("Omit excess options", () => {
  test("unknown option is skipped", () => {
    const config = JSON.stringify({ unknownOption: false });
    expect(parseConfig(config)).toStrictEqual(defaultOptions);
  });

  test("unknown option is skipped and valid option is in effect", () => {
    const config = JSON.stringify({
      enableConstEnums: false,
      unknownOption: false,
    });
    expect(parseConfig(config)).toStrictEqual({
      ...defaultOptions,
      enableConstEnums: false,
    });
  });

  test("unknown option is skipped, invalid option is skipped, and valid option is in effect", () => {
    const config = JSON.stringify({
      enableConstEnums: false,
      unknownOption: false,
      ignoreMinAndMaxItems: "xxx",
    });
    expect(parseConfig(config)).toStrictEqual({
      ...defaultOptions,
      enableConstEnums: false,
    });
  });

  test("unknown envs are skipped", () => {
    const config = JSON.stringify({
      env: {
        unknown1: 1,
        unknown2: "1",
      },
    });
    expect(parseConfig(config)).toStrictEqual(defaultOptions);
  });

  test("unknown envs are skipped and valid envs are in effect", () => {
    const config = JSON.stringify({
      env: {
        MONGODB_URI: "SOME_URI",
        MONGODB_DATABASE: "SOME_DB",
        unknown1: 1,
        unknown2: "1",
      },
    });
    expect(parseConfig(config)).toStrictEqual({
      ...defaultOptions,
      env: {
        MONGODB_URI: "SOME_URI",
        MONGODB_DATABASE: "SOME_DB",
      },
    });
  });

  test("unknown envs are skipped, invalid env is skipped, and valid envs are in effect", () => {
    const config = JSON.stringify({
      env: {
        MONGODB_URI: "SOME_URI",
        MONGODB_DATABASE: 1,
        unknown1: 1,
        unknown2: "1",
      },
    });
    expect(parseConfig(config)).toStrictEqual({
      ...defaultOptions,
      env: {
        MONGODB_URI: "SOME_URI",
        MONGODB_DATABASE: "MONGODB_DATABASE",
      },
    });
  });
});
