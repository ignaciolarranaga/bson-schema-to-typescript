import fs from "fs";
import prettier from "prettier";
import { JsonValue } from "./types";

export async function prettierOptions(path: string): Promise<prettier.Options> {
  const options = await prettier.resolveConfig(path);

  return {
    ...options,
    parser: "typescript",
  };
}

export type Options = {
  uri: string;
  database: string;
  out: string;
  bannerComment: string[];
  enableConstEnums: boolean;
  ignoreMinAndMaxItems: boolean;
  strictIndexSignatures: boolean;
  unknownAny: boolean;
};

export const defaultOptions: Options = {
  uri: "mongodb://localhost:27017",
  database: "",
  out: "src/__generated__",
  bannerComment: [
    "/* eslint-disable */",
    "/* tslint:disable */",
    "",
    "/**",
    "* This file was automatically generated by bson-schema-to-typescript.",
    "* https://www.npmjs.com/package/bson-schema-to-typescript",
    "*",
    "* Do not modify it by hand. Instead, modify the MongoDB $jsonSchema validator,",
    "* and run bson2ts to regenerate this file.",
    "*/",
  ],
  enableConstEnums: true,
  ignoreMinAndMaxItems: false,
  strictIndexSignatures: false,
  unknownAny: true,
};

function readConfig() {
  const configPath = "./bson2ts.json";

  return fs.existsSync(configPath)
    ? fs.readFileSync(configPath).toString()
    : JSON.stringify({});
}

export function parseConfig(config: string): Options {
  try {
    const options = JSON.parse(config) as JsonValue;

    if (
      typeof options !== "object" ||
      options === null ||
      Array.isArray(options)
    ) {
      throw new Error("config must be a plain object");
    }

    const bannerComment = (Array.isArray(options.bannerComment) &&
    options.bannerComment.every((e) => typeof e === "string")
      ? options.bannerComment
      : defaultOptions.bannerComment) as string[];

    const enableConstEnums =
      typeof options.enableConstEnums === "boolean"
        ? options.enableConstEnums
        : defaultOptions.enableConstEnums;

    const ignoreMinAndMaxItems =
      typeof options.ignoreMinAndMaxItems === "boolean"
        ? options.ignoreMinAndMaxItems
        : defaultOptions.ignoreMinAndMaxItems;

    const strictIndexSignatures =
      typeof options.strictIndexSignatures === "boolean"
        ? options.strictIndexSignatures
        : defaultOptions.strictIndexSignatures;

    const unknownAny =
      typeof options.unknownAny === "boolean"
        ? options.unknownAny
        : defaultOptions.unknownAny;

    const out =
      typeof options.out === "string" ? options.out : defaultOptions.out;

    const database =
      typeof options.database === "string"
        ? expandEnv(options.database)
        : defaultOptions.database;

    const uri =
      typeof options.uri === "string" ? options.uri : defaultOptions.uri;

    return {
      database,
      uri,
      out,
      bannerComment,
      enableConstEnums,
      ignoreMinAndMaxItems,
      strictIndexSignatures,
      unknownAny,
    };
  } catch (error) {
    return defaultOptions;
  }
}

export function loadConfig(): Options {
  const config = readConfig();

  return parseConfig(config);
}

function getEnv(name: string): string {
  const env = process.env[name];

  if (!env) {
    throw new Error(`${name} environment variable not defined`);
  }

  return env;
}

/**
 * Returns the expanded environment variable if the provided value starts with
 * "$", otherwise returns the provided value as-is.
 */
export function expandEnv(val: string): string {
  return val.startsWith("$") ? getEnv(val.slice(1)) : val;
}
